package main;

import robot.Rect;
import javafx.application.Application;
import static javafx.application.Application.launch;
import javafx.application.Platform;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;
import serial.SerialMonitor;
import serial.SerialPortAction;

public class Main extends Application {

    private static Stage mainStage;
    private static Scene mainScene;
    private static FXMLDocumentController controller;
    private static SerialMonitor serialMonitor;

    /**
     * Start the application.
     *
     * We store stage and scene for later so we can get size and position data
     * from them.
     *
     * @param stage The Stage generated by JavaFX
     *
     * @throws Exception
     */
    @Override
    public void start(Stage stage) throws Exception {
        /*
        Save the reference to the stage
         */
        mainStage = stage;
        /*
        Set what happens when an 'application close' event is triggered.
         */
        mainStage.setOnCloseRequest(new EventHandler<WindowEvent>() {
            @Override
            public void handle(WindowEvent event) {
                /*
                Clean up and exit the application
                 */
                closeApplication();
            }
        });
        /*
        Use the loader to load the window controls
         */
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/FXMLDocument.fxml"));
        Parent root = loader.load();
        /*
        Save a reference to the controller for later.
        This is so the serial monitor can pass action messages to it.
         */
        controller = loader.getController();
        /*
        Save a reference to the scene for later.
         */
        mainScene = new Scene(root);

        stage.setScene(mainScene);
        stage.show();
    }

    /**
     * Close the application.
     *
     * The serial port monitor should be closed properly.
     *
     * Then the Platform (JavaFX) must be told to exit
     *
     * Then we terminate the Java VM
     */
    public static void closeApplication() {
        if (serialMonitor != null) {
            serialMonitor.close();
        }
        Platform.exit();
        System.exit(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /*
        Start the serial port monitor and pass in a SerialPortAction class
        
        The port String for linux is /dev/ttyACM0
        The port String for windows is com1: (I think)
        
        The baud rate (serial speed) is defaulted by the Microbit to 115200 unless changed in the Microbit code
        
        The application will fail if the port string is incorrect. The console will have the stack trace
         */
        serialMonitor = new SerialMonitor("COM8", 115200, new SerialPortAction() {
            @Override
            public boolean action(String s) {
                /*
                Tha action MUST be in a JavaFX Thread so we must use runLater.
                 */
                Platform.runLater(new Runnable() {
                    @Override
                    public void run() {
                        /*
                        Set the label on the controller via the action method
                         */
                        if (controller != null) {
                            controller.action("Received:" + s);
                        }
                    }
                });
                return true;
            }

            @Override
            public void fail(Exception s) {
                closeApplication();
            }
        }, "ttyACM0");
        serialMonitor.start();
        launch(args);
    }

    /**
     * This method returns the rectangle that is the effective application
     * window (inside the borders)
     *
     * The values are screen coordinates not application coordinates
     *
     * @return a rectangle
     */
    public static Rect getRectangle() {
        double x = mainStage.getX() + mainScene.getX();
        double y = mainStage.getY() + mainScene.getY();
        return new Rect((int) x, (int) y, (int) mainScene.getWidth(), (int) mainScene.getHeight());
    }

}
